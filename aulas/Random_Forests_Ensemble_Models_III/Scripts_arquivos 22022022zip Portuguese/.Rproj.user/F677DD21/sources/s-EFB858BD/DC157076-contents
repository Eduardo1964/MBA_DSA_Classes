library("randomForest")

tempo_ini <- Sys.time()
rf <- randomForest(y ~ ., 
                 data=HAR_train[,2:563],
                 ntree=50,
                 mtry=100)

rf
tempo_fim <- Sys.time()
tempo_fim - tempo_ini

c_test <- predict(rf, HAR_test)
c_test[1:10]

######################
# Função para avaliar o modelo

avalia <- function(modelo, nome_modelo="modelo", df_treino, df_teste, vresp = "y"){
  p_treino <- predict(modelo, df_treino, type='prob') # Probabilidade predita
  c_treino <- predict(modelo, df_treino)              # Classificação
  
  #Base de teste
  p_teste <- predict(modelo, df_teste, type='prob')
  c_teste <- predict(modelo, df_teste)
  
  cm_treino <- confusionMatrix(c_treino, df_treino[,vresp])
  print(cm_treino$table)
  print(cm_treino$overall["Accuracy"])
  
  cm_teste <- confusionMatrix(c_teste,  df_teste[,vresp])
  print(cm_teste$table)
  print(cm_teste$overall['Accuracy'])
  
}

avalia(rf, nome_modelo="rf", HAR_train, HAR_test, vresp = "y")
#######################

rf$importance

variaveis_selecionadas <- rf$importance %>% as.data.frame() %>% top_n(5) %>% row.names

variaveis_selecionadas

HAR_train$y %>% table

tempo_ini <- Sys.time()
rn <- neuralnet(y ~ ., 
                data=HAR_train[,c(variaveis_selecionadas, 'y')] %>% sample_frac(0.1),
                hidden = c(10),
                linear.output = F)

tempo_fim <- Sys.time()
tempo_fim - tempo_ini

plot(rn)

modelo <- rn
# avaliarn <- function(modelo, nome_modelo="modelo", df_treino, df_teste, vresp = "y"){
  p_treino <- neuralnet::compute(modelo, df_treino) # Probabilidade predita
  c_treino <- apply(p_treino$net.result, MARGIN = 1, which.max)
  c_treino <- factor(c_treino,
         levels = c(1, 2, 3, 4, 5, 6),
         labels=c('andando', 'subindo', 'descendo', 'sentado', 'em pé', 'deitado'))

  #Base de teste
  p_teste <- neuralnet::compute(modelo, df_teste) # Probabilidade predita
  c_teste <- apply(p_teste$net.result, MARGIN = 1, which.max)
  c_teste <- factor(c_teste,
                     levels = c(1, 2, 3, 4, 5, 6),
                     labels=c('andando', 'subindo', 'descendo', 'sentado', 'em pé', 'deitado'))
  
  cm_treino <- confusionMatrix(c_treino, df_treino[,vresp])
  print(cm_treino$table)
  print(cm_treino$overall["Accuracy"])
  
  cm_teste <- confusionMatrix(c_teste,  df_teste[,vresp])
  print(cm_teste$table)
  print(cm_teste$overall['Accuracy'])
  
}
max.col(data, ties.method = "first")
avalia(rn, nome_modelo="rn", HAR_train, HAR_test, vresp = "y")
apply(preds$net.result, MARGIN = 1, which.max) %>% table

