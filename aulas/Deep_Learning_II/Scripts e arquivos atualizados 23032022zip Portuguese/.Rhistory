Yreal <- matrix(Y[,train],nrow=1)
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
Ytrain
model$error
dim(Ytrain)
dim(Yreal)
View(Yreal)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
rsq(Yreal,Ytrain)
plot(Ytrain, Yreal, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
plot(Ytrain, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
plot(Ytrain, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
lines(Yreal,pch = 18, col = "blue", type = "b", lty = 2)
plot(Ytrain, type = "b", frame = FALSE, pch = 19,
col = "darkred", xlab = "x", ylab = "y")
lines(Yreal,pch = 18, col = "darkblue", type = "l", lty = 2)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal,pch = 18, col = "darkblue", type = "l", lty = 2)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.001,
hidden_dim = 50,
numepochs = 200,
network_type = "gru"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.01,
hidden_dim = 50,
numepochs = 200,
network_type = "rnn"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
summary(data_analise)
data_analise <- data_analise[1:248,]
x=data_analise[,2]
y=data_analise[,1]
X=matrix(x, nrow = 31)
Y=matrix(y, nrow = 31)
Yscaled = (Y - min(Y)) / (max(Y) - min(Y))
Xscaled = (X - min(X)) / (max(X) - min(X))
Y=Yscaled
X=Xscaled
# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables.
X=array( c(X), dim=c(dim(X),1) )
dim(Y)
train=1:6
test=7:8
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 2000,
network_type = "rnn"
)
plot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')
Yp <- predictr(model, Y[,test])
plot(as.vector(t(Y[test,])), col = 'red', type='l',
main = "Actual vs Predicted Humidity: testing set",
ylab = "Y,Yp")
lines(as.vector(t(Yp)), type = 'l', col = 'black')
legend("bottomright", c("Predicted", "Actual"),
col = c("red","black"),
lty = c(1,1), lwd = c(1,1))
rsq <- function (x, y) cor(x, y) ^ 2
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
summary(data_analise)
data_analise <- data_analise[1:248,]
x=data_analise[,2]
y=data_analise[,1]
X=matrix(x, nrow = 31)
Y=matrix(y, nrow = 31)
Yscaled = (Y - min(Y)) / (max(Y) - min(Y))
Xscaled = (X - min(X)) / (max(X) - min(X))
Y=Yscaled
X=Xscaled
# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables.
X=array( c(X), dim=c(dim(X),1) )
dim(Y)
train=1:6
test=7:8
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
summary(data_analise)
data_analise <- data_analise[1:248,]
x=data_analise[,2]
y=data_analise[,1]
X=matrix(x, nrow = 31)
Y=matrix(y, nrow = 31)
Yscaled = (Y - min(Y)) / (max(Y) - min(Y))
Xscaled = (X - min(X)) / (max(X) - min(X))
Y=Yscaled
X=Xscaled
# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables.
X=array( c(X), dim=c(dim(X),1) )
dim(Y)
train=1:6
test=7:8
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
rsq(Yreal,Ytrain)
library("rattle.data")
library("rnn")
library("ggplot2")
data(weatherAUS)
View(weatherAUS)
#extrair somente colunas 1 and 14  e primeiras 3040 linhas (Albury location)
data <- weatherAUS[1:3040,14:15]
summary(data)
View(data)
data_cleaned <- na.omit(data)
#Explicar conceito de dado de entrada em RNN
data_used <- data_cleaned[1:3000,]
#Explicar conceito de dado de entrada em RNN
data_used <- data_cleaned[1:3000,]
View(data_used)
x <- data_used[,1]
y <- data_used[,2]
head(x)
head(y)
X <- matrix(x, nrow = 30)
Y <- matrix(y, nrow = 30)
#Normalizar
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Y <- Yscaled
Xscaled <- (X - min(X)) / (max(X) - min(X))
X <- Xscaled
#train test split
train=1:80
test=81:100
set.seed(12)
?trainr
train
library("rattle.data")
library("rnn")
library("ggplot2")
data(weatherAUS)
View(weatherAUS)
#extrair somente colunas 1 and 14  e primeiras 3040 linhas (Albury location)
data <- weatherAUS[1:3040,14:15]
summary(data)
data_cleaned <- na.omit(data)
#Só 3000 linhas para processar mais rapido e podermos dividir
#Explicar conceito de dado de entrada em RNN
data_used <- data_cleaned[1:3000,]
x <- data_used[,1]
y <- data_used[,2]
head(x)
head(y)
X <- matrix(x, nrow = 30)
Y <- matrix(y, nrow = 30)
#Normalizar
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Y <- Yscaled
Xscaled <- (X - min(X)) / (max(X) - min(X))
X <- Xscaled
#train test split
train=1:80
test=81:100
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.01,
hidden_dim = 15,
network_type = "rnn",
numepochs = 100)
model$input_dim
model$hidden_dim
model$network_type
model$error
#poucas épocas?
plot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')
?predictr
Yp <- predictr(model, X[,test])
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
plot(as.vector(t(result_data$Ytest)), col = 'red', type='l',
main = "Actual vs Predicted Humidity: testing set",
ylab = "Y,Yp")
lines(as.vector(t(Yp)), type = 'l', col = 'black')
legend("bottomright", c("Predicted", "Actual"),
col = c("red","black"),
lty = c(1,1), lwd = c(1,1))
View(Yp)
rsq <- function(y_actual,y_predict)
{
cor(y_actual,y_predict)^2
}
View(Y)
Y[,test]
Ytest=matrix(Y[,test], nrow = 1)
View(Ytest)
Ytest = t(Ytest)
View(Ytest)
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
Ypredicted <- t(Ypredicted)
View(Ypredicted)
Ypredicted <- t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
View(result_data)
rsq(result_data$Ytest,result_data$Ypredicted)
View(data_used)
plot(as.vector(t(result_data$Ytest)), col = 'red', type='l',
main = "Actual vs Predicted Humidity: testing set",
ylab = "Y,Yp")
lines(as.vector(t(Yp)), type = 'l', col = 'black')
legend("bottomright", c("Predicted", "Actual"),
col = c("red","black"),
lty = c(1,1), lwd = c(1,1))
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
View(data)
fechamento <- data$Close
View(data)
fechamento
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
View(data_analise)
fechamento_anterior <- lead(fechamento,n=1L)
?lead
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
View(data_analise)
data_analise <- na.omit(data_analise)
View(data_analise)
summary(data_analise)
#exclui NA
data_analise <- data_analise[1:248,]
View(data_analise)
x=data_analise[,2]
y=data_analise[,1]
248/31
X=matrix(x, nrow = 31)
Y=matrix(y, nrow = 31)
View(Y)
Yscaled = (Y - min(Y)) / (max(Y) - min(Y))
Xscaled = (X - min(X)) / (max(X) - min(X))
Y=Yscaled
X=Xscaled
train=1:6
test=7:8
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
c(X)
dim(Y)
dim(X)
# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables.
X=array( dim(X),1)
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
dim(X)
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
summary(data_analise)
#exclui NA
data_analise <- data_analise[1:248,]
x <- data_analise[,2]
y <- data_analise[,1]
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
dim(X)
# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables.
X=array(31,8,1)
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train,],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train,]),nrow=1))
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
fechamento <- data$Close
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
summary(data_analise)
#exclui NA
data_analise <- data_analise[1:248,]
x <- data_analise[,2]
y <- data_analise[,1]
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "rnn"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
View(Yreal)
View(Ytrain)
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
