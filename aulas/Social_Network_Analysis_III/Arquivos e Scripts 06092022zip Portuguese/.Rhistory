install.packages ("igraph")
install.packages("igraph")
library (igraph)
# desenhando a rede do exemplo
g <- graph(edges = c("A","B",  "B","C",  "B","D",  "D","C", "C","E"), directed = F)
### conhecendo o objeto g
# verificando a classe
class(g)
# vendo o objeto
g
#vendo os nos (entidades / vertices)
V(g)
#vendo os links (edges)
E(g)
# esses sao informacoes que estao dentro do objeto igraph e que podem conter mais
# informacoes, por exemplo, pesos
# inserindo pesos no meu grafo (neste caso, todas 1)
V(g)$weight  <- c(1,1,1,1,1)
# observando os atributos carregados
g
#######################
# Plotando  meu grafo #
#######################
plot(g)
# exemplo com firulas
plot(g, vertex.color="pink", vertex.size=35,
vertex.frame.color="red", vertex.label.color="green",
vertex.label.cex=1, vertex.label.dist=4, edge.curved=0.2)
### metricas da rede (geral)
#densidade do grafo
edge_density(g)
#diametro da rede
diameter(g)
#raio da rede
radius(g)
#comprimeiro medio do caminho
mean_distance(g)
library (igraph)
# desenhando a rede do exemplo
g <- graph(edges = c("A","B",  "B","C",  "B","D",  "D","C", "C","E"), directed = F)
### conhecendo o objeto g
# verificando a classe
class(g)
# vendo o objeto
g
#vendo os nos (entidades / vertices)
V(g)
#vendo os links (edges)
E(g)
# esses sao informacoes que estao dentro do objeto igraph e que podem conter mais
# informacoes, por exemplo, pesos
# inserindo pesos no meu grafo (neste caso, todas 1)
V(g)$weight  <- c(1,1,1,1,1)
# observando os atributos carregados
g
#######################
# Plotando  meu grafo #
#######################
plot(g)
# exemplo com firulas
plot(g, vertex.color="pink", vertex.size=35,
vertex.frame.color="red", vertex.label.color="green",
vertex.label.cex=1, vertex.label.dist=4, edge.curved=0.2)
### metricas da rede (geral)
#densidade do grafo
edge_density(g)
#diametro da rede
diameter(g)
#raio da rede
radius(g)
#comprimeiro medio do caminho
mean_distance(g)
# degree
degree(g)
# histograma dos degrees (caso queira ver a distribuicao, como vimos no Gephi)
hist(degree(g), breaks=15, main="Histograma do degree")
# clustering coeficient
transitivity(g, type = "local")
#closeness
closeness(g, mode="all", weights=NA, normalized=T)
closeness(g, mode="all", weights=NA)  #o default eh normalized=F
1/0,5
1/0.5
# betweeness
betweenness(g, directed=F, weights=NA)
# excentricidade
eccentricity(g)
# o famoso e tao desejado bridge (ponte ou ponto de articulacao)
articulation.points(g)
# para plotar aumentando o tamanho dos nos a partir do degree, por exemplo
degree_nos <- degree(g, mode="all") #aqui simplesmente dei um nome pro objeto degree
plot(g, vertex.size=degree_nos*20) #coloquei o tamanho do no a partir do valor do
# posso, por exemplo, pintar de outra cor os nos que sao pontes
V(g)$color <- "pink"
V(g)$color[ articulation_points(g) ] <- "red"
plot(g, layout = layout.fruchterman.reingold)
V(g)$degree <- degree(g)
V(g)$cc <- transitivity(g, type = "local")
V(g)$closeness <- closeness(g, mode="all", weights=NA, normalized=T)
V(g)$betweenneess <-betweenness(g, directed=F, weights=NA)
V(g)$excentricidade <-eccentricity(g)
V(g)$bridge <- 0
V(g)$bridge[ articulation_points(g) ] <- 1
tabela_nos <- igraph::as_data_frame(g, what="vertices")
View(tabela_nos)
#desenhando distancias entre dois pontos (que eu especifico) - olha que animal
caminho_curto <- shortest_paths(g,
from = V(g)[name=="A"],
to  = V(g)[name=="E"],
output = "both") # both representa nos e links
# Gerando a variavel de cor da borda para tracar o caminho mais curto:
ecol <- rep("gray80", ecount(g))
ecol[unlist(caminho_curto$epath)] <- "green"
# Gerando variavel de largura do link para plotar o caminho mais curto:
ew <- rep(2, ecount(g))
ew[unlist(caminho_curto$epath)] <- 4
# Gerando variavel de cor do no para plotar o caminho mais curto:
vcol <- rep("gray40", vcount(g))
vcol[unlist(caminho_curto$vpath)] <- "gold"
# agora plotando com as marcacoes geradas
plot(g, vertex.color=vcol, edge.color=ecol, edge.width=ew)
library (igraph)
library (readr)
# importando bases
karate <- read.csv("dados/karate.csv", header=T, as.is=T, sep=";")
View(karate)
#transformando em grafo
rede_karate <- graph_from_data_frame(d=karate, directed=F)
#plotando o grafo
plot(rede_karate)
comunidades <- cluster_edge_betweenness(rede_karate)
V(rede_karate)$id_comunidade <- membership(comunidades)
plot(comunidades, rede_karate)
modularity(comunidades)
comunidades1 <- cluster_fast_greedy(rede_karate)
V(rede_karate)$id_comunidade1 <- membership(comunidades1)
plot(comunidades1, rede_karate)
modularity(comunidades1)
comunidades2 <- cluster_optimal(rede_karate)
V(rede_karate)$id_comunidade2 <- membership(comunidades2)
plot(comunidades2, rede_karate)
modularity(comunidades2)
comunidades3 <- cluster_louvain(rede_karate)
V(rede_karate)$id_comunidade3 <- membership(comunidades3)
plot(comunidades3, rede_karate)
modularity(comunidades3)
nodes_karate <- igraph::as_data_frame(rede_karate, what="vertices")
View(nodes_karate)
# importando bases
karate <- read.csv("seu_caminho/karate.csv", header=T, as.is=T, sep=";")
#transformando em grafo
rede_karate <- graph_from_data_frame(d=karate, directed=F)
#plotando o grafo
plot(rede_karate)
comunidades <- cluster_edge_betweenness(rede_karate)
V(rede_karate)$id_comunidade <- membership(comunidades)
plot(comunidades, rede_karate)
comunidades1 <- cluster_fast_greedy(rede_karate)
V(rede_karate)$id_comunidade1 <- membership(comunidades1)
plot(comunidades1, rede_karate)
comunidades2 <- cluster_optimal(rede_karate)
V(rede_karate)$id_comunidade2 <- membership(comunidades2)
plot(comunidades2, rede_karate)
comunidades3 <- cluster_louvain(rede_karate)
V(rede_karate)$id_comunidade3 <- membership(comunidades3)
plot(comunidades3, rede_karate)
nodes_karate <- igraph::as_data_frame(rede_karate, what="vertices")
# desenhando a rede por tamanho do betweeenneess
bet <- betweenness(rede_karate)
plot(comunidades3, rede_karate, vertex.size=bet*0.1)
#calculando e armazenando metricas da rede geral
V(rede_karate)$degree_sc <- degree(rede_karate)
V(rede_karate)$cc_sc <- transitivity(rede_karate, type = "local")
V(rede_karate)$closeness_sc <- closeness(rede_karate, mode="all", weights=NA)
V(rede_karate)$betweenneess_sc <- betweenness(rede_karate, directed=F, weights=NA)
#calculando e armazenando metricas por comunidade
redefiltro_ <- list()
for (i in min(V(rede_karate)$id_comunidade3):max(V(rede_karate)$id_comunidade3)) {
net_cid <- delete_vertices(rede_karate, V(rede_karate)$id_comunidade3!=i)
V(net_cid)$degree_cc <- degree(net_cid)
V(net_cid)$cc_cc <- transitivity(net_cid, type = "local")
V(net_cid)$closeness_cc <- closeness(net_cid, mode="all", weights=NA)
V(net_cid)$betweenneess_cc <- betweenness(net_cid, directed=F, weights=NA)
redefiltro_[[i]] <- igraph::as_data_frame(net_cid, what="vertices")
print(redefiltro_[[i]])
}
nodes_metricas_por_comun <- bind_rows(redefiltro_)
redefiltro_
