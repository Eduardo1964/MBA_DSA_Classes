pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
############################################
# Avaliar a árvore na base de teste
p_teste = stats::predict(arvore, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot(aval_teste, aes(d = obs, m = Y, colour='a')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de teste")
CurvaROC
##########################
# pós-poda (Grid Search) #
tab_cp <- rpart::printcp(arvore)
tab_cp
plotcp(arvore)
tab_cp[which.min(tab_cp[,'xerror']),]
cp_min <- tab_cp[which.min(tab_cp[,'xerror']),'CP']
set.seed(1)
arvore_poda <- rpart::rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=treino,
method='class',
xval=0,
control = rpart.control(cp = cp_min,
minsplit = 1,
maxdepth = 30)
)
p_treino = stats::predict(arvore_poda, treino)
c_treino = base::factor(ifelse(p_treino[,2]>.5, "Y", "N"))
p_teste = stats::predict(arvore_poda, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
#####
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot(aval_teste, aes(d = obs, m = Y, colour='a')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de teste")
CurvaROC
###############################################
# Vamos separar a base em treinamento e teste #
set.seed(123)
bool_treino <- stats::runif(dim(titanic)[1])>.25
treino <- titanic[bool_treino,]
teste  <- titanic[!bool_treino,]
titanic %>% str
set.seed(123)
arvore <- rpart::rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=treino,
method='class',
xval=5,
control = rpart.control(cp = 0,
minsplit = 1,
maxdepth = 30)
)
# Verificando a complexidade da árvore
arvore$frame
############################################
# Avaliar a árvore na base de treino
p_treino = stats::predict(arvore, treino)
c_treino = base::factor(ifelse(p_treino[,2]>.5, "Y", "N"))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
############################################
# Avaliar a árvore na base de teste
p_teste = stats::predict(arvore, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot(aval_teste, aes(d = obs, m = Y, colour='a')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de teste")
CurvaROC
###############################################
# Vamos separar a base em treinamento e teste #
set.seed(123)
bool_treino <- stats::runif(dim(titanic)[1])>.25
treino <- titanic[bool_treino,]
teste  <- titanic[!bool_treino,]
titanic %>% str
set.seed(123)
arvore <- rpart::rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=treino,
method='class',
xval=5,
control = rpart.control(cp = 0,
minsplit = 1,
maxdepth = 30)
)
# Verificando a complexidade da árvore
arvore$frame
############################################
# Avaliar a árvore na base de treino
p_treino = stats::predict(arvore, treino)
c_treino = base::factor(ifelse(p_treino[,2]>.5, "Y", "N"))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
tab <- table(c_treino, treino$Survived)
tab
(tab[1,1]+tab[2,2])/nrow(treino)
print('Acurácia na base de treino:', acc)
print(paste('Acurácia na base de treino: ', acc))
sprintf(paste('Acurácia na base de treino: ', acc))
sprintf('Acurácia na base de treino: %f', acc)
sprintf('Acurácia na base de treino: %f \%', acc)
sprintf('Acurácia na base de treino: %f %', acc)
sprintf('Acurácia na base de treino: %f ', acc)
sprintf('Acurácia na base de treino: %f ', percent(acc))
sprintf('Acurácia na base de treino: %s ', percent(acc))
############################################
# Avaliar a árvore na base de treino
p_treino = stats::predict(arvore, treino)
c_treino = base::factor(ifelse(p_treino[,2]>.5, "Y", "N"))
p_teste = stats::predict(arvore, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
tab <- table(c_treino, treino$Survived)
acc <- (tab[1,1]+tab[2,2])/nrow(treino)
sprintf('Acurácia na base de treino: %s ', percent(acc))
tab <- table(c_teste, treino$Survived)
acc <- (tab[1,1]+tab[2,2])/nrow(teste)
sprintf('Acurácia na base de treino: %s ', percent(acc))
tab <- table(c_teste, teste$Survived)
acc <- (tab[1,1]+tab[2,2])/nrow(teste)
sprintf('Acurácia na base de treino: %s ', percent(acc))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
############################################
# Avaliar a árvore na base de teste
p_teste = stats::predict(arvore, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot(aval_teste, aes(d = obs, m = Y, colour='a')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de teste")
CurvaROC
##########################
# pós-poda (Grid Search) #
tab_cp <- rpart::printcp(arvore)
tab_cp
plotcp(arvore)
tab_cp[which.min(tab_cp[,'xerror']),]
cp_min <- tab_cp[which.min(tab_cp[,'xerror']),'CP']
set.seed(1)
arvore_poda <- rpart::rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=treino,
method='class',
xval=0,
control = rpart.control(cp = cp_min,
minsplit = 1,
maxdepth = 30)
)
p_treino = stats::predict(arvore_poda, treino)
c_treino = base::factor(ifelse(p_treino[,2]>.5, "Y", "N"))
p_teste = stats::predict(arvore_poda, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
#####
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot(aval_teste, aes(d = obs, m = Y, colour='a')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de teste")
CurvaROC
##########################
# pós-poda (Grid Search) #
##########################
tab_cp <- rpart::printcp(arvore)
tab_cp
########################
# Instalação de pacotes
pacotes <- c('titanic',    # carrega a base original titanic_treino
'tidyverse',  # Pacote básico de datawrangling
'rpart',      # Biblioteca de árvores
'rpart.plot', # Conjunto com Rpart, plota a parvore
'gtools',     # funções auxiliares como quantcut,
'Rmisc',      # carrega a função sumarySE para a descritiva
'scales', # importa paletas de cores
'caret'       # Funções úteis para machine learning
)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
titanic %>% head
# Vamos criar uma base temporária para manter a base original intacta
tmp <- titanic
tmp$survived <- as.integer(titanic$Survived=="Y")
descritiva <- function(var){
# Sumariza a taxa de sobreviventes por categoria da variável em análise
tgc <- Rmisc::summarySE(tmp, measurevar="survived", groupvars=c(var))
ggplot(tgc) +
# Plota o gráfico de barras com as frequências
geom_bar(aes(x=tgc[,var], weight=N/891, fill=as.factor(tgc[,var]))) +
# Plota as barras de erro
geom_errorbar(aes(x=tgc[,var], y=survived, ymin=survived-se, ymax=survived+se, colour='1'), width=.1) +
# Plota as médias de cada grupo
geom_point(aes(x=tgc[,var], y=survived, colour='1', group='1')) +
# Plota as linhas que conectam as médias
geom_line(aes(x=tgc[,var], y=survived, colour='1', group='1')) +
# Escala de cores do gráfico de médias
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
# Escala de cores do gráfico de barras
scale_fill_viridis_d(direction = -1, begin=.85, end=.95) +
# Estética mais 'leve' do gráfico
theme(panel.background = element_rect(fill = "white", colour = "grey", linetype = "solid"),
panel.grid.major = element_line(size = 0.15, linetype = 'solid', colour = "grey")) +
# Remove a legenda
theme(legend.position = "none") +
# Rótulo dos eixos
xlab(var) + ylab("Taxa de sobreviventes") +
# Marcas do eixo secundário
scale_y_continuous(sec.axis = sec_axis(~.*891, name = "Frequencia"), labels = scales::percent)
}
descritiva("Sex")
descritiva("Pclass")
descritiva("Embarked")
descritiva("SibSp")
descritiva("Parch")
# Vamos categorizar as variáveis contínuas para analisar
tmp$cat_age <- quantcut(tmp$Age, 20)
descritiva("cat_age")
tmp$cat_fare <- quantcut(tmp$Fare, 10)
descritiva("cat_fare")
# Listagem das variáveis com algumas características
titanic %>% str
#############################################
# Vamos construir a árvore de classificação #
arvore <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=titanic,
parms = list(split = 'gini'), # podemos trocar para  'information'
method='class' # Essa opção indica que a resposta é qualitativa
)
save(titanic)
###############################################
# Vamos separar a base em treinamento e teste #
set.seed(123)
bool_treino <- stats::runif(dim(titanic)[1])>.25
treino <- titanic[bool_treino,]
teste  <- titanic[!bool_treino,]
titanic %>% str
set.seed(123)
arvore <- rpart::rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=treino,
method='class',
xval=5,
control = rpart.control(cp = 0,
minsplit = 1,
maxdepth = 30)
)
# Verificando a complexidade da árvore
arvore$frame
############################################
# Avaliar a árvore na base de treino
p_treino = stats::predict(arvore, treino)
c_treino = base::factor(ifelse(p_treino[,2]>.5, "Y", "N"))
p_teste = stats::predict(arvore, teste)
c_teste = base::factor(ifelse(p_teste[,2]>.5, "Y", "N"))
tab <- table(c_treino, treino$Survived)
acc <- (tab[1,1]+tab[2,2])/nrow(treino)
sprintf('Acurácia na base de treino: %s ', percent(acc))
tab <- table(c_teste, teste$Survived)
acc <- (tab[1,1]+tab[2,2])/nrow(teste)
sprintf('Acurácia na base de treino: %s ', percent(acc))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
caret::twoClassSummary(aval_treino, lev=levels(aval_treino$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot2::ggplot(aval_treino, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de treino")
CurvaROC
# Vamos calcular a área da curva ROC com uma função no Caret
# A função é o twoClassSummary, que espera como entrada um dataframe com esse layout:
# obs: uma coluna contendo um fator com as classes observadas
# pred: fator com as classes preditas
# <classe 1> (Y no caso): contém a probabilidade da classe 1
# <classe 2> (Y no caso): contém a probabilidade da classe 2
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
twoClassSummary(aval_teste, lev=levels(aval_teste$obs))
# Podemos usar o mesmo dataframe para fazer a curva ROC:
CurvaROC <- ggplot(aval_teste, aes(d = obs, m = Y, colour='a')) +
plotROC::geom_roc(n.cuts = 0) +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle("Curva ROC - base de teste")
CurvaROC
##########################
# pós-poda (Grid Search) #
##########################
tab_cp <- rpart::printcp(arvore)
tab_cp
plotcp(arvore)
load("~/Desktop/Eu professor/pecege/Machine Learning/Arvores/OMML1_arvores_de_decisao/.RData")
load("~/Desktop/Eu professor/pecege/Machine Learning/Arvores/OMML1_arvores_de_decisao/.RData")
View(treino)
load("~/Desktop/Eu professor/pecege/Machine Learning/Arvores/OMML1_arvores_de_decisao/.RData")
titanic
titanic %>% is.na %>% colSums
library(tidyverse)
library(tidyverse)
library(tidyverse)
titanic %>% is.na %>% colSums
titanic %>% save('/Users/juka42/Desktop/Eu professor/pecege/Machine Learning/Arvores/OMML1_arvores_de_decisao/titanic.RData')
titanic %>% save(file='/Users/juka42/Desktop/Eu professor/pecege/Machine Learning/Arvores/OMML1_arvores_de_decisao/titanic.RData')
