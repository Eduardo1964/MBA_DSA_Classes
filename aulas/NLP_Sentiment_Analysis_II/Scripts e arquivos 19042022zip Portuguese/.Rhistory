View(book_tf_idf)
book_tf_idf %>%
group_by(gutenberg_id) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(tf_idf, word, fill = gutenberg_id)) +
geom_col(show.legend = FALSE) +
labs(x = "tf-idf", y = NULL) +
facet_wrap(~gutenberg_id, ncol = 2, scales = "free")
View(book_tf_idf)
View(book_words)
#TF-IDF
othello <- book_words %>% filter(gutenberg_id == 28526)
View(othello)
contos <- book_words %>% filter(gutenberg_id == 28691)
View(contos)
#Não vamos pré-processar, a ideia é mostrar papel do tf-idf
othello_tf_idf <- othello %>% bind_tf_idf(word, gutenberg_id, n)
View(othello_tf_idf)
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
#Vamos usar Othello e Contos do Norte
livros <- gutenberg_download(c(28526,28691))
book_words <- livros %>%
unnest_tokens(word, text) %>%
count(gutenberg_id, word, sort = TRUE)
#TF-IDF
othello <- book_words %>% filter(gutenberg_id == 28526)
contos <- book_words %>% filter(gutenberg_id == 28691)
View(othello)
#Não vamos pré-processar, a ideia é mostrar papel do tf-idf
othello_tf_idf <- othello %>% bind_tf_idf(word, gutenberg_id, n)
View(othello_tf_idf)
#TF-IDF
#Não vamos pré-processar, a ideia é mostrar papel do tf-idf
books_tf_idf <- book_words %>% bind_tf_idf(word, gutenberg_id, n)
View(books_tf_idf)
othello_tf_idf <- books_tf_idf %>% filter(gutenberg_id == 28526)
View(othello_tf_idf)
contos_tf_idf <- books_tf_idf %>% filter(gutenberg_id == 28691)
View(contos_tf_idf)
?bind_tf_idf
book_tf_idf %>%
group_by(gutenberg_id) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf))
books_tf_idf %>%
group_by(gutenberg_id) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf))
?bind_tf_idf
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
?bind_tf_idf
#Vamos usar Othello e Contos do Norte
livros <- gutenberg_download(c(28526,28691))
#Unnest tokes para análise
book_words <- livros %>%
unnest_tokens(word, text) %>%
count(gutenberg_id, word, sort = TRUE)
View(book_words)
#TF-IDF
#Não vamos pré-processar, a ideia é mostrar papel do tf-idf
books_tf_idf <- book_words %>% bind_tf_idf(word, gutenberg_id, n)
View(books_tf_idf)
#Separa para ver palavras mais importantes por texto
othello_tf_idf <- books_tf_idf %>% filter(gutenberg_id == 28526)
contos_tf_idf <- books_tf_idf %>% filter(gutenberg_id == 28691)
View(contos_tf_idf)
books_tf_idf %>% group_by(gutenberg_id) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf))
books_graph <- books_tf_idf %>% group_by(gutenberg_id) %>%
slice_max(tf_idf, n = 15) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf))
View(books_graph)
?reorder
?ungroup
books_graph %>% ggplot(aes(tf_idf, word, fill = gutenberg_id)) +
geom_col(show.legend = FALSE) +
labs(x = "tf-idf", y = NULL) +
facet_wrap(~gutenberg_id, ncol = 2, scales = "free")
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
#Tipos de sentimentos
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
tidy_books <- austen_books() %>%  group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
View(tidy_books)
tidy_books <- austen_books() %>%
group_by(book) %>%
unnest_tokens(word, text)
View(tidy_books)
#Palavras mais comuns de prazer para análise de sentimentos
nrc_joy <- get_sentiments("nrc") %>%  filter(sentiment == "joy")
View(nrc_joy)
View(tidy_books)
tidy_books %>%  filter(book == "Emma")
book <- tidy_books %>%  filter(book == "Emma") %>%  inner_join(nrc_joy)
View(book)
book <- tidy_books %>%  filter(book == "Emma") %>%  inner_join(nrc_joy) %>%  count(word, sort = TRUE)
View(book)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment)
get_sentiments("bing")
library("reshape2")
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 10)
tidy_books <- austen_books() %>%
mutate
(
linenumber = row_number()
) %>%
group_by(book) %>%
unnest_tokens(word, text)
View(tidy_books)
austen_books() %>%
mutate
(
linenumber = row_number()
) %>%
#Segundo test - Project Gutenberg
#install.packages("gutenbergr")
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
#Tipos de sentimentos
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
tidy_books <- austen_books() %>%
group_by(book) %>%
unnest_tokens(word, text)
View(tidy_books)
nrc_joy <- get_sentiments("nrc") %>%  filter(sentiment == "joy")
book <- tidy_books %>%  filter(book == "Emma") %>%  inner_join(nrc_joy) %>%  count(word, sort = TRUE)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing"))
View(jane_austen_sentiment)
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- tidy_books %>% filter(book == 'Sense & Sensibility')
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- tidy_books %>% filter(book == 'Sense & Sensibility')
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- tidy_books %>% filter(book == Sense & Sensibility)
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- tidy_books %>% filter(book == "Sense & Sensibility")
sense_and_sensibility <- tidy_books
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- tidy_books %>% filter(sentiment == "Positive")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- tidy_books %>% filter(word == "sense")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- jane_austen_sentiment %>% filter(word == "sense")
library("dplyr")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- jane_austen_sentiment %>% filter(word == "sense")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- jane_austen_sentiment %>% filter(word == "sense")
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
tidy_books <- austen_books() %>%
group_by(book) %>%
unnest_tokens(word, text)
#Palavras mais comuns de prazer para análise de sentimentos
nrc_joy <- get_sentiments("nrc") %>%  filter(sentiment == "joy")
#Realizar inner join com o livro EMMA para entender sentimentos
book <- tidy_books %>%  filter(book == "Emma") %>%  inner_join(nrc_joy) %>%  count(word, sort = TRUE)
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- jane_austen_sentiment %>% filter(word == "sense")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- jane_austen_sentiment %>% filter(word == "sense")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing")) %>%
sense_and_sensibility <- jane_austen_sentiment %>% filter(word == "sense")
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing"))
sense_and_sensibility <- jane_austen_sentiment %>% filter(book == "Persuasion")
persuasion <- jane_austen_sentiment %>% filter(book == "Persuasion")
View(persuasion)
persuasion <- persuasion %>% mutate(
net_sentiment = ifelse(sentiment=="negative",-1,1))
sum(persuasion$net_sentiment)
library("reshape2")
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(4,.5)
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(4,.5),
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(2,.5),
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(.5,.5),
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(1,.5),
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(1.5,.5),
max.words = 10)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(1.5,.5),
max.words = 100)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
scale=c(1,.5),
max.words = 100)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "green"),
scale=c(1,.5),
max.words = 100)
persuasion %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
get_sentiments("bing")
jane_austen_sentiment %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "green"),
scale=c(1,.5),
max.words = 100)
jane_austen_sentiment %>%
inner_join(get_sentiments("bing")) %>%
group_by(book) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "green"),
scale=c(1,.5),
max.words = 100)
View(jane_austen_sentiment)
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
#word cloud
library("reshape2")
emma <- jane_austen_sentiment %>% filter(book == "Emma")
tidy_books <- austen_books() %>%
group_by(book) %>%
unnest_tokens(word, text)
View(tidy_books)
northanger <- tidy_books %>% filter(book == "	Northanger Abbey")
northanger %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "green"),
scale=c(1,.5),
max.words = 100)
tidy_books %>% filter(book == "	Northanger Abbey")
View(tidy_books)
mansfield <- tidy_books %>% filter(book == "Mansfield Park")
mansfield %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "green"),
scale=c(1,.5),
max.words = 100)
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
tidy_books <- austen_books() %>%
group_by(book) %>%
unnest_tokens(word, text)
#Palavras mais comuns de prazer para análise de sentimentos
nrc_joy <- get_sentiments("nrc") %>%  filter(sentiment == "joy")
#Realizar inner join com o livro EMMA para entender sentimentos
book <- tidy_books %>%  filter(book == "Emma") %>%  inner_join(nrc_joy) %>%  count(word, sort = TRUE)
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing"))
View(book)
#usando o sistema bing para calcular o sentimento em polaridade
jane_austen_sentiment <- tidy_books %>% inner_join(get_sentiments("bing"))
persuasion <- jane_austen_sentiment %>% filter(book == "Persuasion")
persuasion <- persuasion %>% mutate(
net_sentiment = ifelse(sentiment=="negative",-1,1))
sum(persuasion$net_sentiment)
#word cloud
library("reshape2")
mansfield <- tidy_books %>% filter(book == "Mansfield Park")
mansfield %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "green"),
scale=c(1,.5),
max.words = 100)
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
library("reshape2")
mansfield <- tidy_books %>% filter(book == "Mansfield Park")
mansfield %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0)
library("gutenbergr")
library("dplyr")
library("tidytext")
library("ggplot2")
library("lexiconPT")
library("janeaustenr")
library("stringr")
library("tidyr")
library("wordcloud")
tidy_books <- austen_books() %>%
group_by(book) %>%
unnest_tokens(word, text)
#word cloud
library("reshape2")
mansfield <- tidy_books %>% filter(book == "Mansfield Park")
mansfield %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0)
View(mansfield)
mansfield %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE)
?acast
?comparison.cloud
library("readxl")
library("tm")
library("wordcloud")
library("e1071")
library("gmodels")
library("SnowballC")
library("caret")
library("dplyr")
twitter <- read.csv2("twitter_validation.csv",sep = ",",header = FALSE)
View(twitter)
twitter <- twitter %>% select(V3,V4) %>% filter(V3 == c('Positive','Negative'))
twitter <- read.csv2("twitter_validation.csv",sep = ",",header = FALSE)
View(twitter)
twitter <- twitter %>% select(V3,V4) %>% filter(V3 == c('Positive','Negative'))
colnames(twitter) <- c("sentiment","text")
View(twitter)
?tm_map
#Train set
corpus = VCorpus(VectorSource(twitter$text))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[1]])
View(corpus)
dtm = DocumentTermMatrix(corpus)
inspect(dtm)
dim(dtm)
dtm = removeSparseTerms(dtm, 0.999)
inspect(dtm)
convert <- function(x)
{
y <- ifelse(x > 0, 1,0)
y <- factor(y, levels=c(0,1), labels=c("No", "Yes"))
y
}
datanaive = apply(dtm, 2, convert)
dataset = as.data.frame(as.matrix(datanaive))
dataset$Class = factor(twitter$sentiment)
View(dataset)
set.seed(31)
split = sample(2,nrow(dataset),prob = c(0.75,0.25),replace = TRUE)
train_set = dataset[split == 1,]
test_set = dataset[split == 2,]
prop.table(table(train_set$Class))
prop.table(table(test_set$Class))
classifier_nb <- naiveBayes(train_set[1:1439], train_set$Class)
nb_pred = predict(classifier_nb, type = 'class', newdata =  test_set[1:1439])
confusionMatrix(nb_pred,test_set$Class)
